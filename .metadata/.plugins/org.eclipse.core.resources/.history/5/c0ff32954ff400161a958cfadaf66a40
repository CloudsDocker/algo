package com.todzhang;

import java.util.Arrays;

public class ConstructTreeByInOrderAndPosOrder {

	public static void main(String[] args) {

		int[] aryInOrder=new int[]{4,2,5,1,6,3,7};
		// in in-order array, the root it at exact middle 
		// the sub array left of root is left sub tree
		int[] aryPostOrder=new int[]{4,5,2,6,7,3,1}; 
		// in post order array, the last element is root
		
		int nRoot=aryPostOrder[aryPostOrder.length-1];
		// to construct tree from in-order and post-order traverse
		TreeNode root=buildTree(aryInOrder, aryPostOrder);
	}
	
	
	private static TreeNode buildTree(int[] in, int[] post){
		if(in.length<1 || post.length<1)
			return null;
		
		int nRoot=post[post.length-1];
		TreeNode focusRoot=new TreeNode(nRoot);
		int nPosInRoot=0;
		
		// find position index of root element
		// be advised the root may NOT in exact middle, as the subtree may NOT be complete
		for(int n=0;n<in.length-1;n--){
			if(in[n]==nRoot){
				nPosInRoot=n;
				break;
			}
		}
		
		focusRoot.left=buildTree(Arrays.copyOfRange(in, 0, nPosInRoot), Arrays.copyOfRange(post, 0, nPosInRoot));
		focusRoot.right=buildTree(Arrays.copyOfRange(in, nPosInRoot+1,in.length-1), Arrays.copyOfRange(post, nPosInRoot+1,post.length-1));
		return focusRoot;
	}

}
