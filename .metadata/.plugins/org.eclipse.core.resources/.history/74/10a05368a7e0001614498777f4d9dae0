 package com.todzhang;

 public class GetTreeWidth1{
	 
	 
 	class Node{
 		int value;
 		Node left,right;

 		public Node(int inValue){
 			this.value=inValue;
 		}
 	}
 	
 	private static int getMaxWidth(Node node){
 		int nMax=0;
 		for(int i=1;i<=getHeight(node);i++){
 			int nWidth=getWidth(node, i);
 			if(nWidth>nMax){
 				nMax=nWidth;
 			}
 		}
 		
 		return nMax;
 	}
 	
 	/*
 	 * The logic is decrease level while traverse from root (top to bottom)
 	 * when there is no node, return zero
 	 * while level is 1 means at the desired level, return 1 to add count
 	 * the return value is count sum in both left and right node
 	 */
 	private static int getWidth(Node node, int level){
 		if(node==null)
 			return 0;
 		if(level==1)
 			return 1;
 		return getWidth(node.left, level-1)+getWidth(node.right, level-1);
 	}
 	
 	private static int getHeight(Node node){
 		int height=0;
 		
 		if(node==null){
 			return 0;
 		}
 		
 		return 1+Math.max(getHeight(node.left),getHeight(node.right));
 	}

 	public static void main(String[] args){
 		GetTreeWidth1 inst=new GetTreeWidth1();
 		/*
        Constructed bunary tree is:
              1
            /  \
           2    3
         /  \    \
        4   5     8 
                 /  \
                6   7
         */
 		Node root=inst.new Node(1);
 		root.left=inst.new Node(2);
 		root.right=inst.new Node(3);
 		root.left.left=inst.new Node(4);
 		root.left.right=inst.new Node(5);
 		root.right.right=inst.new Node(8);
 		root.right.right.left=inst.new Node(6);
 		root.right.right.right=inst.new Node(7);

 		System.out.println("-- height is :"+getHeight(root));
 		for(int i=1;i<=4;i++){
 			System.out.println("-- width of "+i+"is :"+getWidth(root,i));
 		}
 		System.out.println(" ==== the max width ===");
 	}
 }
